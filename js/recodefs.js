/***************************************************
 * semdiag: draw SEM path diagram interactively    *
 * Authors: Yujiao Mai, Zhiyong Zhang, Ke-Hai Yuan *
 * Copyright 2015-2015, psychstat.org              *
 * Licensed under the MIT License (MIT)            *
 * Current software version 1.0                    *
 * Support email for questions zzhang4@nd.edu      *
 *                             ymai@nd.edu         * 
 ***************************************************/

// update 2021-June 18 - fix save diagram to html by ZX
// update 2021-June 18 - fix save diagram to svg by ZX

// function GraphToText2(){var e="MARKS:";e+="\nNodecurrent_IdNUM:"+Nodecurrent_IdNUM+",Edgecurrent_IdNUM:"+Edgecurrent_IdNUM+",Elli_current_TitleNUM:"+Elli_current_TitleNUM+",Rec_current_TitleNUM:"+Rec_current_TitleNUM+",h:"+h+",w:"+w,e+="\nNODES:";for(var t=0;t<nodes.length;t++){var r=nodes[t];e+="\nid:"+r.id+",type:"+r.type+",x:"+r.x+",y:"+r.y+",rx:"+r.rx+",ry:"+r.ry+",color:"+r.color+",dotted:"+r.dotted+",strokewidth:"+r.strokewidth+",title:"+r.title+",fontsize:"+r.fontsize}e+="\nEDGES:";for(t=0;t<edges.length;t++){var a,n,s=edges[t],l=-1;switch(s.power){case 2:a=nodes[matchnodeindex(nodes,s.startid)],n=nodes[matchnodeindex(nodes,s.endid)];break;case 3:n=a=nodes[matchnodeindex(nodes,s.nodeid)],l=s.curve_LR}var i=1;s.labelInitial?i=1:t_lableInitial=0;var o=1;o=s.handleInitial?1:0;var d=1;d=s.IsAutoGenerated?1:0,e+="\nid:"+s.id+",startnodeid:"+a.id+",endnodeid:"+n.id+",type:"+s.type+",handlePx:"+s.handleP.x+",handlePy:"+s.handleP.y+",color:"+s.color+",dotted:"+s.dotted+",strokewidth:"+s.strokewidth+",label:"+s.label+",labelPx:"+s.labelP.x+",labelPy:"+s.labelP.y+",labelFsize:"+s.labelFsize+",labelInitial:"+i+",curve_LR:"+l+",handleInitial:"+o+",IsAutoGenerated:"+d}e+="\nNOTES:";for(t=0;t<notes.length;t++){var c=notes[t];e+="\nx:"+c.x+",y:"+c.y+",color:"+c.color+",text:"+c.text+",fontsize:"+c.fontsize}return e}function AdjustChartSize(e,t,r,a){for(var n=0,s=0,l=0;l<e.length;l++){n<(o=e[l].x+2*e[l].rx)&&(n=o),s<(d=e[l].y+2*e[l].ry)&&(s=d)}for(var i=0;i<t.length;i++){n<(o=t[i].handleP.x+cPr)&&(n=o),s<(d=t[i].handleP.y+cPr)&&(s=d),n<(o=t[i].labelP.x+2*default_RADIUSH)&&(n=o),s<(d=t[i].labelP.y+2*default_RADIUSV)&&(s=d)}for(l=0;l<a.length;l++){var o,d;n<(o=a[l].x+a[l].text.length*a[l].fontsize*.5)&&(n=o),s<(d=a[l].y+1.5*a[l].fontsize)&&(s=d)}return{w:n=n+=2*default_RADIUSH,h:s=s+=2*default_RADIUSV}}function GraphFromText2(e){for(var t=[],r=[],a=[],n={},s=e.split("\n"),l="",i=0;i<s.length;i++){var o=s[i],d=o.length;switch(o.substr(0,d-1)){case"MARKS:":l="mark";break;case"NODES:":l="node";break;case"EDGES:":l="edge";break;case"NOTES:":l="note";break;default:var c=o.split(",");switch(l){case"node":if(c.length>0){for(var h,b="",k="ellipse",p=default_RADIUSH,u=default_RADIUSV,x=default_RADIUSH,f=default_RADIUSV,y=backgroundCOLOR,g="none",m="",w=defaultFONTSIZE,N=default_strokeWIDTH,_=!1,v=0;v<c.length;v++){var O=(Y=(X=c[v].split(":"))[0]).length;Y=Y.substr(0,O);var P=(Z=X[1]).length;switch(Z=Z.substr(0,P),Y){case"id":b=Z;break;case"type":k=Z;break;case"x":p=Z;break;case"y":u=Z;break;case"rx":x=Z;break;case"ry":f=Z;break;case"color":y=Z;break;case"dotted":g=Z;break;case"title":m=Z;break;case"fontsize":w=Z;break;case"strokewidth":N=Z}}h={id:b,type:k,x:Number(p),y:Number(u),rx:Number(x),ry:Number(f),color:y,dotted:Number(g),title:m,fontsize:Number(w),strokewidth:Number(N),selected:_},t.push(h)}break;case"edge":if(c.length>0){b="",k="";var R,I="",L="",S=-1,z=(y=defaultCOLOR,g="none",N=default_strokeWIDTH,""),M=-1,T=-1,C=defaultFONTSIZE,A=-1,G=!0,U=!0,E=!1;for(v=0;v<c.length;v++){O=(Y=(X=c[v].split(":"))[0]).length;Y=Y.substr(0,O);P=(Z=X[1]).length;switch(Z=Z.substr(0,P),Y){case"id":b=Z;break;case"type":k=Z;break;case"node1":I=Z;break;case"node2":L=Z;break;case"startnodeid":I=Z;break;case"endnodeid":L=Z;break;case"handlePx":S=Number(Z);break;case"handlePy":t_handlePy=Number(Z);break;case"color":y=Z;break;case"dotted":g=Z;break;case"strokewidth":N=Number(Z);break;case"label":z=Z;break;case"labelPx":M=Number(Z);break;case"labelPy":T=Number(Z);break;case"labelFsize":C=Number(Z);break;case"curve_LR":A=Number(Z);break;case"initial":case"handleInitial":1==Number(Z)?U=!0:0==Number(Z)&&(U=!1);break;case"labelIntial":1==Number(Z)?G=!0:0==Number(Z)&&(G=!1);break;case"IsAutoGenerated":1==Number(Z)?E=!0:0==Number(Z)&&(E=!1)}}""!=I&&""!=L&&""!=k&&(R=generate_edge(t,I,L,k),""!=b&&(R.id=b),S>=0&&t_handlePy>=0&&(R.handleP={x:S,y:t_handlePy}),R.color=y,R.dotted=Number(g),R.strokewidth=N,R.label=z,R.labelFsize=C,R.labelInitial=G,R.handleInitial=U,R.IsAutoGenerated=E,-1!=A&&(R.curve_LR=A),(R=update_bcurve(t,R)).labelP=M>=0&&T>=0?{x:M,y:T}:{x:R.handleP.x+5,y:R.handleP.y-5},r.push(R))}break;case"note":if(c.length>0){p=default_RADIUSH,u=default_RADIUSV,y=defaultCOLOR;var D,F="";for(w=defaultFONTSIZE,_=!1,v=0;v<c.length;v++){O=(Y=(X=c[v].split(":"))[0]).length;Y=Y.substr(0,O);P=(Z=X[1]).length;switch(Z=Z.substr(0,P),Y){case"x":p=Z;break;case"y":u=Z;break;case"color":y=Z;break;case"text":F=Z;break;case"fontsize":w=Z}}D={x:Number(p),y:Number(u),color:y,text:F,fontsize:Number(w),selected:_},a.push(D)}break;case"mark":if(c.length>0){var H=0,j=0,B=0,V=0,W=0,K=0;for(v=0;v<c.length;v++){var X,Y;O=(Y=(X=c[v].split(":"))[0]).length;Y=Y.substr(0,O);var Z;P=(Z=X[1]).length;switch(Z=Z.substr(0,P),Y){case"Nodecurrent_IdNUM":H=Number(Z);break;case"Edgecurrent_IdNUM":j=Number(Z);break;case"Elli_current_TitleNUM":B=Number(Z);break;case"Rec_current_TitleNUM":V=Number(Z);break;case"h":W=Number(Z);break;case"w":K=Number(Z)}}n={Nodecurrent_IdNUM:H,Edgecurrent_IdNUM:j,Elli_current_TitleNUM:B,Rec_current_TitleNUM:V,h:W,w:K}}}}}return{nodes:t,edges:r,notes:a,marks:n}}function GraphToSVG(e,t,r,a){var n="",s=(w,h,AdjustChartSize(e,t,r,a));n+="<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'   version='1.1'  width= '"+s.w+"px' height='"+s.h+"px'>",n+="\n<defs><marker id='arrowfake' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='1' markerHeight='1' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='none' fill='none'></polyline></marker></defs>",n+="\n<defs><marker id='endarrow' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-5 0,5 15,0 ' stroke-width='1px' stroke='BLACK'  fill='BLACK'></polyline></marker></defs>",n+="\n<defs><marker id='beginarrow' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='BLACK' fill='BLACK'></polyline></marker></defs>";for(var l=0;l<COLORlist.length;l++)n+="\n<defs><marker id='endarrow"+COLORlist[l]+"' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-5 0,5 15,0 ' stroke-width='1px' stroke='"+COLORlist[l]+"' fill='"+COLORlist[l]+"' ></polyline></marker></defs>",n+="\n<defs><marker id='beginarrow"+COLORlist[l]+"' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='"+COLORlist[l]+"' fill='"+COLORlist[l]+"' ></polyline></marker></defs>";n+="\n<g id ='pathG' class ='path.G'>";for(l=0;l<t.length;l++){var i,o;switch(t[l].dotted){case 0:P="none";break;case 1:P="5,5";break;default:P="none"}n+="\n<g class='path.Gs'>","uni"===t[l].type?(i="arrowfake",o="endarrow"+t[l].color):"bi"===t[l].type&&(i="endarrow"+t[l].color,o="endarrow"+t[l].color);var d,c="M"+r[l].interP_out1.x+","+r[l].interP_out1.y+" L"+r[l].interP1.x+","+r[l].interP1.y,b="M"+r[l].interP_out2.x+","+r[l].interP_out2.y+" L"+r[l].interP2.x+","+r[l].interP2.y;if(n+="\n<path d='"+c+"'  class='path.Arrow1' fill='none'  stroke= '"+backgroundCOLOR+"'  stroke-width='"+t[l].strokewidth+"px'  style='marker-end: url(#"+i+");'  ></path>",n+="\n<path d='"+b+"'  class='path.Arrow2' fill='none'  stroke= '"+backgroundCOLOR+"'  stroke-width='"+t[l].strokewidth+"px'  style='marker-end: url(#"+o+");'  ></path>",2===t[l].power){var k=e[matchnodeindex(e,t[l].startid)],p=e[matchnodeindex(e,t[l].endid)],u=k.x,x=k.y,f=p.x,y=p.y,g=t[l].cP;d="M"+u+" "+x+" Q"+g.x+" "+g.y+" "+f+" "+y}else if(3===t[l].power){var m=t[l].P0,N=t[l].P1,_=t[l].P2,v=t[l].P3;d="M"+m.x+" "+m.y+" C"+N.x+" "+N.y+" "+_.x+" "+_.y+" "+v.x+" "+v.y}n+="\n<path d='"+d+"'  class='path.link'  fill='none'  stroke='"+t[l].color+"'  stroke-width='"+t[l].strokewidth+"px'  stroke-dasharray='"+P+"'  ></path>",svgstatus.IsShowLabels&&(n+="\n<text class='text.label'  id= 'label"+t[l].id+"'  text-anchor='middle'  font-size= '"+t[l].labelFsize+"pt'  stroke= 'none'  fill=' "+defaultCOLOR+"'  x='"+t[l].labelP.x+"'  y='"+t[l].labelP.y+"'  >"+t[l].label+" </text>"),n+="\n</g>"}n+="\n</g>";for(var O=0;O<e.length;O++){var P;switch(e[O].dotted){case 0:P="none";break;case 1:P="5,5";break;default:P="none"}switch(e[O].type){case"ellipse":n+="\n <g class='ellipse.Gs' id='G"+e[O].id+"' style='stroke: rgb(0, 0, 0);'>",n+="\n <ellipse class='ellipse.node' id='"+e[O].id+"'  cx='"+e[O].x+"'  cy='"+e[O].y+"'  rx='"+e[O].rx+"'  ry='"+e[O].ry+"'  fill='"+defaultFillCOLOR+"'  stroke='"+e[O].color+"'  stroke-dasharray='"+P+"'  stroke-width='"+e[O].strokewidth+"px'  ></ellipse>",n+="\n<text class='text.node'  text-anchor='middle'  font-size='"+e[O].fontsize+"pt'  fill='"+defaultCOLOR+"'  stroke='none'  x='"+e[O].x+"'  y='"+(e[O].y+e[O].fontsize/2)+"'  >"+e[O].title+"</text>",n+="\n</g>";break;case"rect":n+="\n <g class='rect.Gs' id='G"+e[O].id+"' style='stroke: rgb(0, 0, 0);'>",n+="\n <rect class='rect.node'  id='"+e[O].id+"'  x='"+(e[O].x-e[O].rx)+"'  y='"+(e[O].y-e[O].ry)+"'  width='"+2*e[O].rx+"'  height='"+2*e[O].ry+"'  fill='"+defaultFillCOLOR+"'  stroke='"+e[O].color+"'  stroke-dasharray='"+P+"'  stroke-width='"+e[O].strokewidth+"px'  ></rect>",n+="\n<text class='text.node'  text-anchor='middle'  font-size='"+e[O].fontsize+"pt'  fill='"+defaultCOLOR+"'  stroke='none'  x='"+e[O].x+"'  y='"+(e[O].y+e[O].fontsize/2)+"'  >"+e[O].title+"</text>",n+="\n</g>";break;case"triangle":var R=generatePointsForTriangle(e[O].x,e[O].y,e[O].rx,e[O].ry),I=R.p1.x+","+R.p1.y+" "+R.p2.x+","+R.p2.y+" "+R.p3.x+","+R.p3.y+" "+R.p1.x+","+R.p1.y;n+="\n <g class='triangle.Gs' id='G"+e[O].id+"' style='stroke: rgb(0, 0, 0);'>",n+="\n <polygon class='triangle.node'  id='"+e[O].id+"'  points= '"+I+"'  fill='"+defaultFillCOLOR+"'  stroke='"+e[O].color+"'  stroke-dasharray='"+P+"'  stroke-width='"+e[O].strokewidth+"px'  ></polygon>",n+="\n<text class='text.node'  text-anchor='middle'  font-size='"+e[O].fontsize+"pt'  fill='"+defaultCOLOR+"'  stroke='none'  x='"+e[O].x+"'  y='"+(e[O].y+e[O].fontsize/2)+"'  >"+e[O].title+"</text>",n+="\n</g>"}}n+="\n <g class='note.Gs' id='G._notes' style='stroke: rgb(0, 0, 0);'>";for(O=0;O<a.length;O++)n+="\n<text class='text.note'  text-anchor='middle'  font-size='"+a[O].fontsize+"pt'  stroke='none'  fill='"+a[O].color+"'  x='"+a[O].x+"'  y='"+a[O].y+"'  >"+a[O].text+"</text>";return n+="\n</g>",n+="\n</svg>"}function GraphToText1(){r="<p>Start,&nbsp;&nbsp;Type,&nbsp;&nbsp;Path,&nbsp;&nbsp;End,&nbsp;&nbsp;Type,&nbsp;&nbsp;Label</p>";for(var e=0;e<edges.length;e++){var t=edges[e],a=nodes[matchnodeindex(nodes,t.startid)],n=nodes[matchnodeindex(nodes,t.endid)],s={rect:0,ellipse:1,triangle:2},l={uni:1,bi:0};r+="<p>"+a.type=="triangle"?"1":a.title+",&nbsp;&nbsp;"+s[a.type]+",&nbsp;&nbsp;"+l[t.type]+",&nbsp;&nbsp;"+n.title+",&nbsp;&nbsp;"+s[n.type]+",&nbsp;&nbsp;"+t.label+"</p>"}return r}function GraphToMATH(e,t,r,a){var n="<!DOCTYPE html>\n<html>\n<head>";return n+="\n<title>SEM diagrams</title>",n+="\n \t <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_SVG'><\/script>",n+="\n \t <script src='http://semdiag.psychstat.org/js/svg_mathjax.js' charset='utf-8'><\/script>",n+="\n <script>",n+="\n \t new Svg_MathJax().install();",n+="\n \t <\/script>",n+="\n</head>",n+="\n<body>",n+="\n <div id='svg_with_math'> \n",n+=GraphToSVG(e,t,r,a),n+="\n </div>",n+="\n</body>\n</html>"}

function GraphToText2() {
    var e = "MARKS:";
    e += "\nNodecurrent_IdNUM:" + Nodecurrent_IdNUM + ",Edgecurrent_IdNUM:" + Edgecurrent_IdNUM + ",Elli_current_TitleNUM:" + Elli_current_TitleNUM + ",Rec_current_TitleNUM:" + Rec_current_TitleNUM + ",h:" + h + ",w:" + w, e += "\nNODES:";
    for (var t = 0; t < nodes.length; t++) {
        var r = nodes[t];
        e += "\nid:" + r.id + ",type:" + r.type + ",x:" + r.x + ",y:" + r.y + ",rx:" + r.rx + ",ry:" + r.ry + ",color:" + r.color + ",dotted:" + r.dotted + ",strokewidth:" + r.strokewidth + ",title:" + r.title + ",fontsize:" + r.fontsize
    }
    e += "\nEDGES:";
    for (t = 0; t < edges.length; t++) {
        var a, n, s = edges[t],
            l = -1;
        switch (s.power) {
            case 2:
                a = nodes[matchnodeindex(nodes, s.startid)], n = nodes[matchnodeindex(nodes, s.endid)];
                break;
            case 3:
                n = a = nodes[matchnodeindex(nodes, s.nodeid)], l = s.curve_LR
        }
        var i = 1;
        s.labelInitial ? i = 1 : t_lableInitial = 0;
        var o = 1;
        o = s.handleInitial ? 1 : 0;
        var d = 1;
        d = s.IsAutoGenerated ? 1 : 0, e += "\nid:" + s.id + ",startnodeid:" + a.id + ",endnodeid:" + n.id + ",type:" + s.type + ",handlePx:" + s.handleP.x + ",handlePy:" + s.handleP.y + ",color:" + s.color + ",dotted:" + s.dotted + ",strokewidth:" + s.strokewidth + ",label:" + s.label + ",labelPx:" + s.labelP.x + ",labelPy:" + s.labelP.y + ",labelFsize:" + s.labelFsize + ",labelInitial:" + i + ",curve_LR:" + l + ",handleInitial:" + o + ",IsAutoGenerated:" + d
    }
    e += "\nNOTES:";
    for (t = 0; t < notes.length; t++) {
        var c = notes[t];
        e += "\nx:" + c.x + ",y:" + c.y + ",color:" + c.color + ",text:" + c.text + ",fontsize:" + c.fontsize
    }
    return e
}

function AdjustChartSize(e, t, r, a) {
    for (var n = 0, s = 0, l = 0; l < e.length; l++) {
        n < (o = e[l].x + 2 * e[l].rx) && (n = o), s < (d = e[l].y + 2 * e[l].ry) && (s = d)
    }
    for (var i = 0; i < t.length; i++) {
        n < (o = t[i].handleP.x + cPr) && (n = o), s < (d = t[i].handleP.y + cPr) && (s = d), n < (o = t[i].labelP.x + 2 * default_RADIUSH) && (n = o), s < (d = t[i].labelP.y + 2 * default_RADIUSV) && (s = d)
    }
    for (l = 0; l < a.length; l++) {
        var o, d;
        n < (o = a[l].x + a[l].text.length * a[l].fontsize * .5) && (n = o), s < (d = a[l].y + 1.5 * a[l].fontsize) && (s = d)
    }
    return {
        w: n = n += 2 * default_RADIUSH,
        h: s = s += 2 * default_RADIUSV
    }
}

// function GraphFromText2(e) {
//     for (var t = [], r = [], a = [], n = {}, s = e.split("\n"), l = "", i = 0; i < s.length; i++) {
//         var o = s[i],
//             d = o.length;
//         switch (o.substr(0, d - 1)) {
//             case "MARKS:":
//                 l = "mark";
//                 break;
//             case "NODES:":
//                 l = "node";
//                 break;
//             case "EDGES:":
//                 l = "edge";
//                 break;
//             case "NOTES:":
//                 l = "note";
//                 break;
//             default:
//                 var c = o.split(",");
//                 switch (l) {
//                     case "node":
//                         if (c.length > 0) {
//                             for (var h, b = "", k = "ellipse", p = default_RADIUSH, u = default_RADIUSV, x = default_RADIUSH, f = default_RADIUSV, y = backgroundCOLOR, g = "none", m = "", w = defaultFONTSIZE, N = default_strokeWIDTH, _ = !1, v = 0; v < c.length; v++) {
//                                 var O = (Y = (X = c[v].split(":"))[0]).length;
//                                 Y = Y.substr(0, O);
//                                 var P = (Z = X[1]).length;
//                                 switch (Z = Z.substr(0, P), Y) {
//                                     case "id":
//                                         b = Z;
//                                         break;
//                                     case "type":
//                                         k = Z;
//                                         break;
//                                     case "x":
//                                         p = Z;
//                                         break;
//                                     case "y":
//                                         u = Z;
//                                         break;
//                                     case "rx":
//                                         x = Z;
//                                         break;
//                                     case "ry":
//                                         f = Z;
//                                         break;
//                                     case "color":
//                                         y = Z;
//                                         break;
//                                     case "dotted":
//                                         g = Z;
//                                         break;
//                                     case "title":
//                                         m = Z;
//                                         break;
//                                     case "fontsize":
//                                         w = Z;
//                                         break;
//                                     case "strokewidth":
//                                         N = Z
//                                 }
//                             }
//                             h = {
//                                 id: b,
//                                 type: k,
//                                 x: Number(p),
//                                 y: Number(u),
//                                 rx: Number(x),
//                                 ry: Number(f),
//                                 color: y,
//                                 dotted: Number(g),
//                                 title: m,
//                                 fontsize: Number(w),
//                                 strokewidth: Number(N),
//                                 selected: _
//                             }, t.push(h)
//                         }
//                         break;
//                     case "edge":
//                         if (c.length > 0) {
//                             b = "", k = "";
//                             var R, I = "",
//                                 L = "",
//                                 S = -1,
//                                 z = (y = defaultCOLOR, g = "none", N = default_strokeWIDTH, ""),
//                                 M = -1,
//                                 T = -1,
//                                 C = defaultFONTSIZE,
//                                 A = -1,
//                                 G = !0,
//                                 U = !0,
//                                 E = !1;
//                             for (v = 0; v < c.length; v++) {
//                                 O = (Y = (X = c[v].split(":"))[0]).length;
//                                 Y = Y.substr(0, O);
//                                 P = (Z = X[1]).length;
//                                 switch (Z = Z.substr(0, P), Y) {
//                                     case "id":
//                                         b = Z;
//                                         break;
//                                     case "type":
//                                         k = Z;
//                                         break;
//                                     case "node1":
//                                         I = Z;
//                                         break;
//                                     case "node2":
//                                         L = Z;
//                                         break;
//                                     case "startnodeid":
//                                         I = Z;
//                                         break;
//                                     case "endnodeid":
//                                         L = Z;
//                                         break;
//                                     case "handlePx":
//                                         S = Number(Z);
//                                         break;
//                                     case "handlePy":
//                                         t_handlePy = Number(Z);
//                                         break;
//                                     case "color":
//                                         y = Z;
//                                         break;
//                                     case "dotted":
//                                         g = Z;
//                                         break;
//                                     case "strokewidth":
//                                         N = Number(Z);
//                                         break;
//                                     case "label":
//                                         z = Z;
//                                         break;
//                                     case "labelPx":
//                                         M = Number(Z);
//                                         break;
//                                     case "labelPy":
//                                         T = Number(Z);
//                                         break;
//                                     case "labelFsize":
//                                         C = Number(Z);
//                                         break;
//                                     case "curve_LR":
//                                         A = Number(Z);
//                                         break;
//                                     case "initial":
//                                     case "handleInitial":
//                                         1 == Number(Z) ? U = !0 : 0 == Number(Z) && (U = !1);
//                                         break;
//                                     case "labelIntial":
//                                         1 == Number(Z) ? G = !0 : 0 == Number(Z) && (G = !1);
//                                         break;
//                                     case "IsAutoGenerated":
//                                         1 == Number(Z) ? E = !0 : 0 == Number(Z) && (E = !1)
//                                 }
//                             }
//                             "" != I && "" != L && "" != k && (R = generate_edge(t, I, L, k), "" != b && (R.id = b), S >= 0 && t_handlePy >= 0 && (R.handleP = {
//                                 x: S,
//                                 y: t_handlePy
//                             }), R.color = y, R.dotted = Number(g), R.strokewidth = N, R.label = z, R.labelFsize = C, R.labelInitial = G, R.handleInitial = U, R.IsAutoGenerated = E, -1 != A && (R.curve_LR = A), (R = update_bcurve(t, R)).labelP = M >= 0 && T >= 0 ? {
//                                 x: M,
//                                 y: T
//                             } : {
//                                 x: R.handleP.x + 5,
//                                 y: R.handleP.y - 5
//                             }, r.push(R))
//                         }
//                         break;
//                     case "note":
//                         if (c.length > 0) {
//                             p = default_RADIUSH, u = default_RADIUSV, y = defaultCOLOR;
//                             var D, F = "";
//                             for (w = defaultFONTSIZE, _ = !1, v = 0; v < c.length; v++) {
//                                 O = (Y = (X = c[v].split(":"))[0]).length;
//                                 Y = Y.substr(0, O);
//                                 P = (Z = X[1]).length;
//                                 switch (Z = Z.substr(0, P), Y) {
//                                     case "x":
//                                         p = Z;
//                                         break;
//                                     case "y":
//                                         u = Z;
//                                         break;
//                                     case "color":
//                                         y = Z;
//                                         break;
//                                     case "text":
//                                         F = Z;
//                                         break;
//                                     case "fontsize":
//                                         w = Z
//                                 }
//                             }
//                             D = {
//                                 x: Number(p),
//                                 y: Number(u),
//                                 color: y,
//                                 text: F,
//                                 fontsize: Number(w),
//                                 selected: _
//                             }, a.push(D)
//                         }
//                         break;
//                     case "mark":
//                         if (c.length > 0) {
//                             var H = 0,
//                                 j = 0,
//                                 B = 0,
//                                 V = 0,
//                                 W = 0,
//                                 K = 0;
//                             for (v = 0; v < c.length; v++) {
//                                 var X, Y;
//                                 O = (Y = (X = c[v].split(":"))[0]).length;
//                                 Y = Y.substr(0, O);
//                                 var Z;
//                                 P = (Z = X[1]).length;
//                                 switch (Z = Z.substr(0, P), Y) {
//                                     case "Nodecurrent_IdNUM":
//                                         H = Number(Z);
//                                         break;
//                                     case "Edgecurrent_IdNUM":
//                                         j = Number(Z);
//                                         break;
//                                     case "Elli_current_TitleNUM":
//                                         B = Number(Z);
//                                         break;
//                                     case "Rec_current_TitleNUM":
//                                         V = Number(Z);
//                                         break;
//                                     case "h":
//                                         W = Number(Z);
//                                         break;
//                                     case "w":
//                                         K = Number(Z)
//                                 }
//                             }
//                             n = {
//                                 Nodecurrent_IdNUM: H,
//                                 Edgecurrent_IdNUM: j,
//                                 Elli_current_TitleNUM: B,
//                                 Rec_current_TitleNUM: V,
//                                 h: W,
//                                 w: K
//                             }
//                         }
//                 }
//         }
//     }
//     return {
//         nodes: t,
//         edges: r,
//         notes: a,
//         marks: n
//     }
// }

function GraphFromText2(str) {//console.log("GraphFromText2() begin to run");
	
		var newnodes=[];
		var newedges=[];
		var newnotes=[];
		var newlines=[];
		var newmarks={};
		var newgroup='';
		var newconstraint='';
		var newcontrol='';
		var newsoftware='';
		var newdatafile='';
		var newweight='';
		
        var lines = str.split('\n');//
        var sta = '';
        for (var i = 0; i < lines.length; i++) {
            var s = lines[i];
			switch(s){
				case 'globalMARKS:':{//
					sta='mark';
				} break;
				case 'MARKS:':{//the current version
					sta='mark';
				} break;
				case 'NODES:': {
					sta = 'node';
				}break;
				case 'EDGES:': {
					sta = 'edge';
				} break;
				case 'NOTES:': {
					sta = 'note';
				} break;
				case 'LINES:': {//free lines
					sta = 'line';
				} break;				
				case 'CONSTRAINTS:':{
					sta = 'constraint';
				} break;
				case 'CONTROL:': {
					sta = 'control';
				} break;
				case 'SOFTWARE:': {
				   newsoftware=lines[++i]; //console.log(newsoftware);
				} break;
				case 'DATA:': {
				   newdatafile=lines[++i]; //console.log(newdatafile);
				} break;
				case 'WEIGHT:': {
					newweight=lines[++i]; //console.log(newweight);
				} break;
				case 'GROUP:': {
					newgroup=lines[++i]; //console.log(newgroup);
				} break;
				default: {
					var ss = s.split(',');//
					switch(sta){
						case 'control': {
							if(newcontrol ==''){
							   newcontrol=newcontrol+s;
							} else {
							   newcontrol=newcontrol+'\n'+s;
							}
						}
						break;
						case 'constraint': {
							if(newconstraint ==''){
							   newconstraint=newconstraint+s;
							} else {
							   newconstraint=newconstraint+'\n'+s;
							}
						}
						break;
						case 'node':
							if(ss.length>0 ) {			//console.log("GraphFromText2() sta=='node' begin ");			
								var newnode = NewNode();
								for(var j=0; j< ss.length; j++){
									var sss =ss[j].split(':');
									switch(sss[0]){
										case 'id': newnode.id=sss[1];break;
										case 'type': newnode.type =sss[1];break;
										case 'x': newnode.x=Number(sss[1]);break;
										case 'y': newnode.y=Number(sss[1]);break;
										case 'rx': newnode.rx=Number(sss[1]);break;
										case 'ry': newnode.ry=Number(sss[1]);break;
										case 'color': newnode.color=sss[1];break;
										case 'strokedotted':newnode.dotted=Number(sss[1]); break;//
										case 'dotted': newnode.dotted=Number(sss[1]);break;
										case 'title': newnode.title=sss[1];break;
										case 'fontsize': newnode.fontsize=Number(sss[1]);break;
										case 'strokewidth': newnode.strokewidth=Number(sss[1]);break;
										case 'level':newnode.level= Number(sss[1]);break;//
										default:;
									}
								}//end of for	
								newnodes.push(newnode);							
							}//end of if(ss.length>0 ){}
						break;
						case 'edge':
							
							if( ss.length>0){ //console.log("GraphFromText2() sta=='edge' begin");
								//nodes=newnodes;//
								var newedge=NewEdge();
								for(var j=0; j< ss.length; j++){//console.log("GraphFromText2(): if sta=='edge': for(var j=0; j<ss.length)");
									var sss =ss[j].split(':');
									switch(sss[0]){
										case 'id': newedge.id=sss[1];  break;
										case 'type':newedge.type =sss[1];break;
										case 'node1':newedge.startid =sss[1];break;
										case 'node2':newedge.endid =sss[1];break;
										case 'startnodeid':newedge.startid =sss[1];break;							
										case 'endnodeid':newedge.endid=sss[1];break;
										case 'handlePx':newedge.handleP.x =Number(sss[1]);break;
										case 'handlePy':newedge.handleP.y =Number(sss[1]);break;
										case 'color':newedge.color=sss[1];break;
										case 'dotted':newedge.dotted=Number(sss[1]);break;
										case 'strokewidth':newedge.strokewidth=Number(sss[1]);break;
										case 'label':newedge.label=sss[1];break;
										case 'labelPx':newedge.labelP.x=Number(sss[1]); break;
										case 'labelPy':newedge.labelP.y=Number(sss[1]);break;
										case 'labelFsize':newedge.labelFsize=Number(sss[1]);break;
										case 'curve_LR':newedge.curve_LR=Number(sss[1]);break;//
										case 'initial': if (Number(sss[1])==1){newedge.handleInitial=true;} else if (Number(sss[1])==0)  {newedge.handleInitial=false;} break;
										case 'handleInitial': if (Number(sss[1])==1){newedge.handleInitial=true;} else if (Number(sss[1])==0) {newedge.handleInitial=false;} break;
										case 'labelIntial': if (Number(sss[1])==1){newedge.labelInitial=true;} else if (Number(sss[1])==0)  {newedge.labelInitial=false;} break;
										case 'IsAutoGenerated': if (Number(sss[1])==1){newedge.IsAutoGenerated=true;} else if (Number(sss[1])==0)  {newedge.IsAutoGenerated=false;} break;
										
									}//end of switch(sss[0]){}
								}//end of for	

								
								//if( t_node1 && t_node2 && t_type)
								if (newedge.startid !='' && newedge.endid!='' && newedge.type!=''){ //console.log("GraphFromText2(): if sta=='edge': if (t_node1 && t_node2 && t_type ):");
									newedge.nodeid=newedge.startid;
									if(newedge.handleP.x < 0 || newedge.handleP.y <0) newedge.handleP={x:0, y: 0};			
									if(newedge.curve_LR <= 0) newedge.curve_LR = default_selfcurve_LR;//
									if(newedge.labelP.x < 0 && newedge.labelP.y < 0) { 
										newedge.labelP={x:newedge.handleP.x+5,y:newedge.handleP.y-5};
									} 
								
									if(newedge.startid==newedge.endid) newedge.power=3;
									newedge = update_bcurve(newnodes,newedge, false);
									
									newedges.push(newedge);//console.log(newedge);
								}
							}//end of if( ss.length>0){ }
						break;
						case 'note':
							if ( ss.length>0 ) {			//console.log("GraphFromText2() sta=='note' begin ");			
								var newnote=NewNote();
								for(var j=0; j< ss.length; j++){
									var sss =ss[j].split(':');
									switch(sss[0]){
										case 'id': newnote.id = sss[1];break;
										case 'x':newnote.x= Number(sss[1]);break;
										case 'y':newnote.y= Number(sss[1]);break;
										case 'color':newnote.color=sss[1];break;
										case 'text':newnote.text=sss[1];break;
										case 'fontsize':newnote.fontsize=Number(sss[1]);break;										
									}
								}//end of for	
								newnotes.push(newnote);
							}
						break;
						case 'line':
							if ( ss.length>0 ) {			//console.log("GraphFromText2() sta=='note' begin ");			
								var newline=NewLine();
								for(var j=0; j< ss.length; j++){
									var sss =ss[j].split(':');
									switch(sss[0]){
										case 'id': newline.id = sss[1];break;
										case 'startPx':newline.startP.x= Number(sss[1]);break;
										case 'startPy':newline.startP.y= Number(sss[1]);break;
										case 'endPx':newline.endP.x= Number(sss[1]);break;
										case 'endPy':newline.endP.y= Number(sss[1]);break;	
										case 'handlePx':newline.handleP.x= Number(sss[1]);break;
										case 'handlePy':newline.handleP.y= Number(sss[1]);break;											
										case 'color':newline.color=sss[1];break;
										case 'dotted':newline.dotted= Number(sss[1]);break;
										case 'strokewidth':newline.strokewidth=Number(sss[1]);break;
										
									}
								}//end of for
								newlines.push(newline);
							}
						break;							
						case 'mark' :
							if(ss.length>0 ) { //console.log("GraphFromText2() sta=='mark' begin!");									
								var t_Nodecurrent_IdNUM=0;
								var t_Edgecurrent_IdNUM=0;
								var t_Elli_current_TitleNUM=0;
								var t_Rec_current_TitleNUM=0;
								var t_Hexagon_current_TitleNUM=0;
								var t_h=0;
								var t_w=0;
								for(var j=0; j< ss.length; j++){
									var sss =ss[j].split(':');
									switch(sss[0]){
										case 'Nodecurrent_IdNUM':  t_Nodecurrent_IdNUM=Number(sss[1]);break;
										case 'Edgecurrent_IdNUM': t_Edgecurrent_IdNUM =Number(sss[1]);break;
										case 'Elli_current_TitleNUM': t_Elli_current_TitleNUM=Number(sss[1]);break;
										case 'Rec_current_TitleNUM':t_Rec_current_TitleNUM=Number(sss[1]);break;
										case 'Hexagon_current_TitleNUM':t_Hexagon_current_TitleNUM=Number(sss[1]);break;
										case 'h':t_h=Number(sss[1]);break;
										case 'w': t_w=Number(sss[1]);break;		
									}
								}//end of for	
								newmarks={
									Nodecurrent_IdNUM:t_Nodecurrent_IdNUM
									,Edgecurrent_IdNUM:t_Edgecurrent_IdNUM
									,Elli_current_TitleNUM:t_Elli_current_TitleNUM
									,Rec_current_TitleNUM:t_Rec_current_TitleNUM
									,Hexagon_current_TitleNUM:t_Hexagon_current_TitleNUM
									,h:t_h
									,w:t_w	
								};
							}//end of if(ss.length>0 ) { }	
						break;
						default:;									
					}//end of switch(sta){}
				}//end of else split(',')				
			}//end of switch(s){}
        }//end of for(){}
		//console.log("nodes:");console.log(newnodes);
		//console.log("edges:");console.log(newedges);
		
		var graph={
				nodes:newnodes
				, edges:newedges
				, notes:newnotes
				, lines:newlines
				, marks:newmarks
				, group:newgroup
				, constraint:newconstraint
				, control:newcontrol
				, weight:newweight
				, datafile:newdatafile
				, software:newsoftware
			};			
			
		if (newnodes.length==0){
			//console.log('newnodes.length==0 : begin GraphFromText1(str):');
			graph=GraphFromText1(str);
		}
		
    return graph;
}
function GraphToSVG(e, t, r, a) {
    var n = "",
        s = (w, h, AdjustChartSize(e, t, r, a));
    n += "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'   version='1.1'  width= '" + s.w + "px' height='" + s.h + "px'>", n += "\n<defs><marker id='arrowfake' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='1' markerHeight='1' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='none' fill='none'></polyline></marker></defs>", n += "\n<defs><marker id='endarrow' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-5 0,5 15,0 ' stroke-width='1px' stroke='BLACK'  fill='BLACK'></polyline></marker></defs>", n += "\n<defs><marker id='beginarrow' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='BLACK' fill='BLACK'></polyline></marker></defs>";
    for (var l = 0; l < COLORlist.length; l++) n += "\n<defs><marker id='endarrow" + COLORlist[l] + "' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-5 0,5 15,0 ' stroke-width='1px' stroke='" + COLORlist[l] + "' fill='" + COLORlist[l] + "' ></polyline></marker></defs>", n += "\n<defs><marker id='beginarrow" + COLORlist[l] + "' viewBox='0 -5 15 5' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-5 15,5' stroke-width='1px' stroke='" + COLORlist[l] + "' fill='" + COLORlist[l] + "' ></polyline></marker></defs>";
    n += "\n<g id ='pathG' class ='path.G'>";
    for (l = 0; l < t.length; l++) {
        var i, o;
        switch (t[l].dotted) {
            case 0:
                P = "none";
                break;
            case 1:
                P = "5,5";
                break;
            default:
                P = "none"
        }
        n += "\n<g class='path.Gs'>", "uni" === t[l].type ? (i = "arrowfake", o = "endarrow" + t[l].color) : "bi" === t[l].type && (i = "endarrow" + t[l].color, o = "endarrow" + t[l].color);
        var d, c = "M" + r[l].interP_out1.x + "," + r[l].interP_out1.y + " L" + r[l].interP1.x + "," + r[l].interP1.y,
            b = "M" + r[l].interP_out2.x + "," + r[l].interP_out2.y + " L" + r[l].interP2.x + "," + r[l].interP2.y;
        if (n += "\n<path d='" + c + "'  class='path.Arrow1' fill='none'  stroke= '" + backgroundCOLOR + "'  stroke-width='" + t[l].strokewidth + "px'  style='marker-end: url(#" + i + ");'  ></path>", n += "\n<path d='" + b + "'  class='path.Arrow2' fill='none'  stroke= '" + backgroundCOLOR + "'  stroke-width='" + t[l].strokewidth + "px'  style='marker-end: url(#" + o + ");'  ></path>", 2 === t[l].power) {
            var k = e[matchnodeindex(e, t[l].startid)],
                p = e[matchnodeindex(e, t[l].endid)],
                u = k.x,
                x = k.y,
                f = p.x,
                y = p.y,
                g = t[l].cP;
            d = "M" + u + " " + x + " Q" + g.x + " " + g.y + " " + f + " " + y
        } else if (3 === t[l].power) {
            var m = t[l].P0,
                N = t[l].P1,
                _ = t[l].P2,
                v = t[l].P3;
            d = "M" + m.x + " " + m.y + " C" + N.x + " " + N.y + " " + _.x + " " + _.y + " " + v.x + " " + v.y
        }
        n += "\n<path d='" + d + "'  class='path.link'  fill='none'  stroke='" + t[l].color + "'  stroke-width='" + t[l].strokewidth + "px'  stroke-dasharray='" + P + "'  ></path>", svgstatus.IsShowLabels && (n += "\n<text class='text.label'  id= 'label" + t[l].id + "'  text-anchor='middle'  font-size= '" + t[l].labelFsize + "pt'  stroke= 'none'  fill=' " + defaultCOLOR + "'  x='" + t[l].labelP.x + "'  y='" + t[l].labelP.y + "'  >" + t[l].label + " </text>"), n += "\n</g>"
    }
    n += "\n</g>";
    for (var O = 0; O < e.length; O++) {
        var P;
        switch (e[O].dotted) {
            case 0:
                P = "none";
                break;
            case 1:
                P = "5,5";
                break;
            default:
                P = "none"
        }
        switch (e[O].type) {
            case "ellipse":
                n += "\n <g class='ellipse.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <ellipse class='ellipse.node' id='" + e[O].id + "'  cx='" + e[O].x + "'  cy='" + e[O].y + "'  rx='" + e[O].rx + "'  ry='" + e[O].ry + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></ellipse>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>";
                break;
            case "rect":
                n += "\n <g class='rect.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <rect class='rect.node'  id='" + e[O].id + "'  x='" + (e[O].x - e[O].rx) + "'  y='" + (e[O].y - e[O].ry) + "'  width='" + 2 * e[O].rx + "'  height='" + 2 * e[O].ry + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></rect>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>";
                break;
            case "triangle":
                var R = generatePointsForTriangle(e[O].x, e[O].y, e[O].rx, e[O].ry),
                    I = R.p1.x + "," + R.p1.y + " " + R.p2.x + "," + R.p2.y + " " + R.p3.x + "," + R.p3.y + " " + R.p1.x + "," + R.p1.y;
                n += "\n <g class='triangle.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <polygon class='triangle.node'  id='" + e[O].id + "'  points= '" + I + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></polygon>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>"
        }
    }
    n += "\n <g class='note.Gs' id='G._notes' style='stroke: rgb(0, 0, 0);'>";
    for (O = 0; O < a.length; O++) n += "\n<text class='text.note'  text-anchor='middle'  font-size='" + a[O].fontsize + "pt'  stroke='none'  fill='" + a[O].color + "'  x='" + a[O].x + "'  y='" + a[O].y + "'  >" + a[O].text + "</text>";
    return n += "\n</g>", n += "\n</svg>"
}

function GraphToSVGforPDF(e, t, r, a) {
    var n = "",
        s = (w, h, AdjustChartSize(e, t, r, a));
   
	n += "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'   version='1.1'  width= '" + s.w + "px' height='" + s.h + "px'>";
    n += "<g id ='pathG' class ='path.G'>";
    for (l = 0; l < t.length; l++) {
        var i, o;
        switch (t[l].dotted) {
            case 0:
                P = "none";
                break;
            case 1:
                P = "5,5";
                break;
            default:
                P = "none"
        }
        n += "\n<g class='path.Gs'>", "uni" === t[l].type ? (i = "arrowfake", o = "endarrow" + t[l].color) : "bi" === t[l].type && (i = "endarrow" + t[l].color, o = "endarrow" + t[l].color);
        var d, c = "M" + r[l].interP_out1.x + "," + r[l].interP_out1.y + " L" + r[l].interP1.x + "," + r[l].interP1.y,
            b = "M" + r[l].interP_out2.x + "," + r[l].interP_out2.y + " L" + r[l].interP2.x + "," + r[l].interP2.y;
        if (n += "\n<path d='" + c + "'  class='path.Arrow1' fill='none'  stroke= '" + backgroundCOLOR + "'  stroke-opacity='0' stroke-width='" + t[l].strokewidth + "px'  style='marker-end: url(#" + i + ");'  ></path>", n += "\n<path d='" + b + "'  class='path.Arrow2' fill='none'  stroke= '" + backgroundCOLOR + "'  stroke-opacity='0' stroke-width='" + t[l].strokewidth + "px'  style='marker-end: url(#" + o + ");'  ></path>", 2 === t[l].power) {
            var k = e[matchnodeindex(e, t[l].startid)],
                p = e[matchnodeindex(e, t[l].endid)],
                u = k.x,
                x = k.y,
                f = p.x,
                y = p.y,
                g = t[l].cP;
            d = "M" + u + " " + x + " Q" + g.x + " " + g.y + " " + f + " " + y
        } else if (3 === t[l].power) {
            var m = t[l].P0,
                N = t[l].P1,
                _ = t[l].P2,
                v = t[l].P3;
            d = "M" + m.x + " " + m.y + " C" + N.x + " " + N.y + " " + _.x + " " + _.y + " " + v.x + " " + v.y
        }
        n += "\n<path d='" + d + "'  class='path.link'  fill='none'  stroke='" + t[l].color + "'  stroke-width='" + t[l].strokewidth + "px'  stroke-dasharray='" + P + "'  ></path>", svgstatus.IsShowLabels && (n += "\n<text class='text.label'  id= 'label" + t[l].id + "'  text-anchor='middle'  font-size= '" + t[l].labelFsize + "pt'  stroke= 'none'  fill=' " + defaultCOLOR + "'  x='" + t[l].labelP.x + "'  y='" + t[l].labelP.y + "'  >" + t[l].label + " </text>"), n += "\n</g>"
    }
    n += "\n</g>";
    for (var O = 0; O < e.length; O++) {
        var P;
        switch (e[O].dotted) {
            case 0:
                P = "none";
                break;
            case 1:
                P = "5,5";
                break;
            default:
                P = "none"
        }
        switch (e[O].type) {
            case "ellipse":
                n += "\n <g class='ellipse.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <ellipse class='ellipse.node' id='" + e[O].id + "'  cx='" + e[O].x + "'  cy='" + e[O].y + "'  rx='" + e[O].rx + "'  ry='" + e[O].ry + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></ellipse>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>";
                break;
            case "rect":
                n += "\n <g class='rect.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <rect class='rect.node'  id='" + e[O].id + "'  x='" + (e[O].x - e[O].rx) + "'  y='" + (e[O].y - e[O].ry) + "'  width='" + 2 * e[O].rx + "'  height='" + 2 * e[O].ry + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></rect>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>";
                break;
            case "triangle":
                var R = generatePointsForTriangle(e[O].x, e[O].y, e[O].rx, e[O].ry),
                    I = R.p1.x + "," + R.p1.y + " " + R.p2.x + "," + R.p2.y + " " + R.p3.x + "," + R.p3.y + " " + R.p1.x + "," + R.p1.y;
                n += "\n <g class='triangle.Gs' id='G" + e[O].id + "' style='stroke: rgb(0, 0, 0);'>", n += "\n <polygon class='triangle.node'  id='" + e[O].id + "'  points= '" + I + "'  fill='" + defaultFillCOLOR + "'  stroke='" + e[O].color + "'  stroke-dasharray='" + P + "'  stroke-width='" + e[O].strokewidth + "px'  ></polygon>", n += "\n<text class='text.node'  text-anchor='middle'  font-size='" + e[O].fontsize + "pt'  fill='" + defaultCOLOR + "'  stroke='none'  x='" + e[O].x + "'  y='" + (e[O].y + e[O].fontsize / 2) + "'  >" + e[O].title + "</text>", n += "\n</g>"
        }
    }
    n += "\n <g class='note.Gs' id='G._notes' style='stroke: rgb(0, 0, 0);'>";
    for (O = 0; O < a.length; O++) n += "\n<text class='text.note'  text-anchor='middle'  font-size='" + a[O].fontsize + "pt'  stroke='none'  fill='" + a[O].color + "'  x='" + a[O].x + "'  y='" + a[O].y + "'  >" + a[O].text + "</text>";

	n += "\n<defs><marker id='arrowfake' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='1' markerHeight='1' orient='auto'><polyline points='0,0 25,-10 25,10' stroke-width='1px' stroke='none' fill='none'></polyline></marker></defs>", n += "\n<defs><marker id='endarrow' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 25,0' stroke-width='1px' stroke='BLACK'  fill='BLACK'></polyline></marker></defs>", n += "\n<defs><marker id='beginarrow' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 25,-10 25,10' stroke-width='1px' stroke='BLACK' fill='BLACK'></polyline></marker></defs>";
    for (var l = 0; l < COLORlist.length; l++) n += "\n<defs><marker id='endarrow" + COLORlist[l] + "' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 25,0 ' stroke-width='1px' stroke='" + COLORlist[l] + "' fill='" + COLORlist[l] + "' ></polyline></marker></defs>", n += "\n<defs><marker id='beginarrow" + COLORlist[l] + "' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 25,-10, 25,10' stroke-width='1px' stroke='" + COLORlist[l] + "' fill='" + COLORlist[l] + "' ></polyline></marker></defs>";
    return n += "\n</g>", n += "\n</svg>"
}

function GraphToSVGforPNG(_nodes, _edges, _edges_tangents, _notes, _lines){ ////console.log("GraphToSVGforPNG():");console.log(_nodes);
	var svgtxt="";
	
	var tempw=w;
	var temph=h;
	var tempchartsize = AdjustChartSize(_nodes, _edges, _edges_tangents, _notes, _lines);
	tempw=tempchartsize.w;
	temph=tempchartsize.h;
	var IsMultilevel = Is_Multilevel(_nodes);//
	
		
	// svgtxt += "\n"+"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'   version='1.1' "
    // + " width= '"+tempw+"px"+"' "+"height='"+temph+"px"+"'>";
	// svgtxt += "\n"+ "<defs><marker id='arrowfake' viewBox='0 -15 30 30' refX='15' refY='0' markerWidth='1' markerHeight='1' orient='auto'><polyline points='0,0 15,-10 15,10' stroke-width='1px' stroke='none' fill='none'></polyline></marker></defs>";
	// svgtxt += "\n"+"<defs><marker id='endarrow' viewBox='0 -15 30 30' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 15,0 ' stroke-width='1px' stroke='BLACK'  fill='BLACK'></polyline></marker></defs>";
	// svgtxt += "\n"+"<defs><marker id='beginarrow' viewBox='0 -15 30 30' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-10 15,10' stroke-width='1px' stroke='BLACK' fill='BLACK'></polyline></marker></defs>";
	// for (var i=0; i<COLORlist.length; i++){
	// 	svgtxt += "\n"+"<defs><marker id='endarrow"+COLORlist[i]+"' viewBox='0 -15 30 30' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 15,0 ' stroke-width='1px' stroke='"+COLORlist[i]+"' fill='"+COLORlist[i]+"' ></polyline></marker></defs>";
	// 	svgtxt += "\n"+"<defs><marker id='beginarrow"+COLORlist[i]+"' viewBox='0 -15 30 30' refX='15' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 15,-10, 15,10' stroke-width='1px' stroke='"+COLORlist[i]+"' fill='"+COLORlist[i]+"' ></polyline></marker></defs>"; 
	// }

		
	svgtxt += "\n"+"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'   version='1.1' "
    + " width= '"+tempw+"px"+"' "+"height='"+temph+"px"+"'>";
	svgtxt += "\n"+ "<defs><marker id='arrowfake' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='1' markerHeight='1' orient='auto'><polyline points='0,0 25,-10 25,10' stroke-width='1px' stroke='none' fill='none'></polyline></marker></defs>";
	svgtxt += "\n"+"<defs><marker id='endarrow' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 25,0 ' stroke-width='1px' stroke='BLACK'  fill='BLACK'></polyline></marker></defs>";
	svgtxt += "\n"+"<defs><marker id='beginarrow' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 25,-10 25,10' stroke-width='1px' stroke='BLACK' fill='BLACK'></polyline></marker></defs>";
	for (var i=0; i<COLORlist.length; i++){
		svgtxt += "\n"+"<defs><marker id='endarrow"+COLORlist[i]+"' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,-10 0,10 25,0 ' stroke-width='1px' stroke='"+COLORlist[i]+"' fill='"+COLORlist[i]+"' ></polyline></marker></defs>";
		svgtxt += "\n"+"<defs><marker id='beginarrow"+COLORlist[i]+"' viewBox='0 -15 30 30' refX='25' refY='0' markerWidth='7' markerHeight='10' orient='auto'><polyline points='0,0 25,-10, 25,10' stroke-width='1px' stroke='"+COLORlist[i]+"' fill='"+COLORlist[i]+"' ></polyline></marker></defs>"; 
	}

	
	svgtxt += "\n" +"<g id ='pathG' class ='path.G'>";
	for (var i=0; i<_edges.length; i++){	
		var tempstrokedotted;
		switch(_edges[i].dotted){
			case 0:tempstrokedotted='none';break;
			case 1:tempstrokedotted='5,5';break;
			default:tempstrokedotted='none';
		}
		var temparrow1;
		var temparrow2;
		svgtxt += "\n" + "<g class='path.Gs'>";

		
		if (_edges[i].type==="uni") {temparrow1="arrowfake";temparrow2="endarrow"+_edges[i].color;} else if (_edges[i].type==="bi"){temparrow1="endarrow"+_edges[i].color;temparrow2="endarrow"+_edges[i].color;}
		var tangentline1 = "M"+  (_edges_tangents[i].interP_out1.x) +","+  (_edges_tangents[i].interP_out1.y)
							+" "+"L"+ (_edges_tangents[i].interP1.x)+","+ (_edges_tangents[i].interP1.y);
		var tangentline2 =  "M"+  (_edges_tangents[i].interP_out2.x) +","+  (_edges_tangents[i].interP_out2.y)
							+" "+"L"+ (_edges_tangents[i].interP2.x)+","+ (_edges_tangents[i].interP2.y);
		svgtxt += "\n"+"<path d='"+tangentline1+"' "
					+ " class='path.Arrow1'" 
					//+ " id= '" + "arrowpath"+_edges[i].id + "' "
					+ " fill='none' "
					+ " stroke= '"+backgroundCOLOR + "' "
					+ " stroke-width='"+_edges[i].strokewidth+"px' " 
					+ " style='marker-end: url(#"+temparrow1+");' "
					+ " ></path>";
		svgtxt += "\n"+"<path d='"+tangentline2+"' "
					+ " class='path.Arrow2'" 
					//+ " id= '" + "arrowpath"+_edges[i].id + "' "
					+ " fill='none' "
					+ " stroke= '"+backgroundCOLOR + "' "
					+ " stroke-width='"+_edges[i].strokewidth+"px' " 
					+ " style='marker-end: url(#"+temparrow2+");' "
					+ " ></path>";
					
		//the path link	
	
		var pathline;
		if(_edges[i].power===2) {
			var startnode=_nodes[matchnodeindex(_nodes,_edges[i].startid)];
			var endnode = _nodes[matchnodeindex(_nodes,_edges[i].endid)];
			var startP={x:startnode.x, y:startnode.y };
			var endP={x:endnode.x,y:endnode.y};
			var cP=_edges[i].cP;
			pathline = "M"+  (startP.x) + " " + (startP.y) + " " + "Q" +  (cP.x)+" " +  (cP.y) + " " +  (endP.x)+" " +  (endP.y) ;
		} else if (_edges[i].power===3){
			var tempP0=_edges[i].P0;
			var tempP1=_edges[i].P1;
			var tempP2=_edges[i].P2;
			var tempP3=_edges[i].P3;
			pathline = "M"+  (tempP0.x) + " " +  (tempP0.y) 
							+ " " + "C" +  (tempP1.x)+" " +  (tempP1.y) 
								+ " " +  (tempP2.x)+" " +  (tempP2.y)
								+" "+  (tempP3.x)+" " +  (tempP3.y);
		}
		
		svgtxt += "\n"+"<path d='"+pathline+"' " 
					+ " class='path.link' " 
					+ " fill='none' " 
					+ " stroke='"+ _edges[i].color+"' "
					+ " stroke-width='"+_edges[i].strokewidth+"px' " 
					+ " stroke-dasharray='"+ tempstrokedotted+"' " 
					//+ " style='" +"marker-start: url(#arrowfake); marker-end: url(#arrowfake);' "
					+ " ></path>";
		if(svgstatus.IsShowLabels){
		
		svgtxt += "\n"+"<text class='text.label' "
					+ " id= '"+"label" + _edges[i].id + "' " 
					+ " text-anchor='middle' " 
					+ " font-size= '"+ _edges[i].labelFsize+"pt"+"' "
					+ " stroke= 'none' "
					+ " fill=' "+ defaultCOLOR+"' "
					+ " x='" +  (_edges[i].labelP.x) + "' "
					+ " y='" +  (_edges[i].labelP.y) +"' "
					+ " >" + _edges[i].label + " </text>";		
		}//end of if (_edges[i].labelshow){}
		
		svgtxt += "\n"+"</g>";
		
	}
	svgtxt += "\n"+"</g>";
	
	
	for (var j=0; j< _nodes.length; j++){
		var tempstrokedotted;
		switch(_nodes[j].dotted){
			case 0:tempstrokedotted='none';break;
			case 1:tempstrokedotted='5,5';break;
			default:tempstrokedotted='none';
		}
		switch(_nodes[j].type){
			case 'rect':
				svgtxt += "\n"+" <g class='rect.Gs' id='G"+ _nodes[j].id+"' style='stroke: rgb(0, 0, 0);'>";
				svgtxt += "\n"+" <rect class='rect.node' "
							+ " id='"+_nodes[j].id+"' "
							+ " x='"+ (_nodes[j].x-_nodes[j].rx)+"' "
							+ " y='"+ (_nodes[j].y-_nodes[j].ry)+"' "
							+ " width='"+ (_nodes[j].rx*2)+"' "
							+ " height='"+ (_nodes[j].ry*2)+"' "
							+ " fill='"+defaultFillCOLOR+"' " 
							+ " stroke='"+_nodes[j].color+"' " 
							+ " stroke-dasharray='"+tempstrokedotted +"' " 
							+ " stroke-width='"+_nodes[j].strokewidth+"px' " 
							+ " ></rect>";
					svgtxt +="\n"+"<text class='text.node' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _nodes[j].fontsize+"pt' "
								+ " fill='" + defaultCOLOR+ "' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y+_nodes[j].fontsize/2)+"' "
								+ " >"+ _nodes[j].title+ "</text>";
					if(IsMultilevel){
						svgtxt += "\n"+" <rect class='rect.level' "
							+ " id='"+_nodes[j].id+".level' "
							+ " x='"+ (_nodes[j].x + _nodes[j].rx -12)+"' "
							+ " y='"+ (_nodes[j].y + _nodes[j].ry -12)+"' "
							+ " width= '12' "
							+ " height= '12' "
							+ " fill= 'none' " 
							+ " stroke= 'GREEN' " 
							+ " stroke-dasharray= 'none' " 
							+ " stroke-width='"+ default_strokeWIDTH+"px' " 
							+ " ></rect>";
							svgtxt +="\n"+"<text class='text.level' "
								+ " text-anchor='middle' "
								+ " font-size= '8pt' "
								+ " fill= 'GREEN' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x + _nodes[j].rx -12+12/2)+"' "
								+ " y='"+ (_nodes[j].y + _nodes[j].ry -12+12/2 + 8/2)+"' "
								+ " >"+ _nodes[j].level+ "</text>";
					}			
					svgtxt += "\n"+"</g>";					
				break;
			case 'ellipse':
					svgtxt += "\n"+" <g class='ellipse.Gs' id='G"+ _nodes[j].id+"' style='stroke: rgb(0, 0, 0);'>";
					svgtxt += "\n"+" <ellipse class='ellipse.node'"
								+" id='"+_nodes[j].id+"' "
								+ " cx='"+ (_nodes[j].x)+"' "
								+ " cy='"+ (_nodes[j].y)+"' "
								+ " rx='"+ (_nodes[j].rx)+"' "
								+ " ry='"+ (_nodes[j].ry)+"' "
								+ " fill='"+defaultFillCOLOR+"' " 
								+ " stroke='"+_nodes[j].color+"' " 
								+ " stroke-dasharray='"+tempstrokedotted+"' " 
								+ " stroke-width='"+_nodes[j].strokewidth+"px' " 
								+ " ></ellipse>";
					svgtxt +="\n"+"<text class='text.node' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _nodes[j].fontsize+"pt' "
								+ " fill='" + defaultCOLOR+ "' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y+_nodes[j].fontsize/2)+"' "
								+ " >"+ _nodes[j].title+ "</text>";
					if(IsMultilevel){
						svgtxt += "\n"+" <rect class='ellipse.level' "
							+ " id='"+_nodes[j].id+".level' "
							+ " x='"+ (_nodes[j].x - 12/2)+"' "
							+ " y='"+ (_nodes[j].y + _nodes[j].ry -12)+"' "
							+ " width= '12' "
							+ " height= '12' "
							+ " fill= 'none' " 
							+ " stroke= 'GREEN' " 
							+ " stroke-dasharray= 'none' " 
							+ " stroke-width='"+ default_strokeWIDTH+"px' " 
							+ " ></rect>";
							svgtxt +="\n"+"<text class='text.level' "
								+ " text-anchor='middle' "
								+ " font-size= '8pt' "
								+ " fill= 'GREEN' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y + _nodes[j].ry -12+12/2 + 8/2)+"' "
								+ " >"+ _nodes[j].level+ "</text>";
					}		
					svgtxt += "\n"+"</g>";
				break;
			case 'hexagon':
				var points=generatePointsForHexagon(_nodes[j].x,_nodes[j].y,_nodes[j].rx,_nodes[j].ry);
				var polygonStr= (points.p1.x)+","+ (points.p1.y)+" "
								+ (points.p2.x)+","+ (points.p2.y)+" "
								+ (points.p3.x)+","+ (points.p3.y) +" "
								+ (points.p4.x)+","+ (points.p4.y) +" "
								+ (points.p5.x)+","+ (points.p5.y) +" "
								+ (points.p6.x)+","+ (points.p6.y )+" "
								+ (points.p1.x)+","+ (points.p1.y);
				svgtxt += "\n"+" <g class='hexagon.Gs' id='G"+ _nodes[j].id+"' style='stroke: rgb(0, 0, 0);'>";
				svgtxt += "\n"+" <polygon class='hexagon.node' "
							+ " id='"+_nodes[j].id+"' "						
							+ " points= '"+polygonStr +"' "
							+ " fill='"+defaultFillCOLOR+"' " 
							+ " stroke='"+_nodes[j].color+"' " 
							+ " stroke-dasharray='"+tempstrokedotted +"' " 
							+ " stroke-width='"+_nodes[j].strokewidth+"px' " 
							+ " ></polygon>";
					svgtxt +="\n"+"<text class='text.node' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _nodes[j].fontsize+"pt' "
								+ " fill='" + defaultCOLOR+ "' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y+_nodes[j].fontsize/2)+"' "
								+ " >"+ _nodes[j].title+ "</text>";
					svgtxt += "\n"+"</g>";
				break;
			case 'triangle':
				var points=generatePointsForTriangle(_nodes[j].x,_nodes[j].y,_nodes[j].rx,_nodes[j].ry);
				var polygonStr= (points.p1.x)+","+ (points.p1.y)
								+" "+ (points.p2.x)+","+ (points.p2.y)
								+" "+ (points.p3.x)+","+ (points.p3.y )
								+" "+ (points.p1.x)+","+ (points.p1.y);
				svgtxt += "\n"+" <g class='hexagon.Gs' id='G"+ _nodes[j].id+"' style='stroke: rgb(0, 0, 0);'>";
				svgtxt += "\n"+" <polygon class='triangle.node' "
							+ " id='"+_nodes[j].id+"' "						
							+ " points= '"+polygonStr +"' "
							+ " fill='"+defaultFillCOLOR+"' " 
							+ " stroke='"+_nodes[j].color+"' " 
							+ " stroke-dasharray='"+tempstrokedotted +"' " 
							+ " stroke-width='"+_nodes[j].strokewidth+"px' " 
							+ " ></polygon>";
					svgtxt +="\n"+"<text class='text.node' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _nodes[j].fontsize+"pt' "
								+ " fill='" + defaultCOLOR+ "' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y+_nodes[j].fontsize/2)+"' "
								+ " >"+ _nodes[j].title+ "</text>";
					svgtxt += "\n"+"</g>";
				break;
			case 'diamond':
				var points=generatePointsForDiamond(_nodes[j].x,_nodes[j].y,_nodes[j].rx,_nodes[j].ry);
				var polygonStr=  (points.p1.x)+","+ (points.p1.y)
									+" "+ (points.p2.x)+","+ (points.p2.y)
									+" "+ (points.p3.x)+","+ (points.p3.y)
									+" "+ (points.p4.x)+","+ (points.p4.y)
									+" "+ (points.p1.x)+","+ (points.p1.y);
				svgtxt += "\n"+" <g class='hexagon.Gs' id='G"+ _nodes[j].id+"' style='stroke: rgb(0, 0, 0);'>";
				svgtxt += "\n"+" <polygon class='triangle.node' "
							+ " id='"+_nodes[j].id+"' "						
							+ " points= '"+polygonStr +"' "
							+ " fill='"+defaultFillCOLOR+"' " 
							+ " stroke='"+_nodes[j].color+"' " 
							+ " stroke-dasharray='"+tempstrokedotted +"' " 
							+ " stroke-width='"+_nodes[j].strokewidth+"px' "
							+ " ></polygon>";
					svgtxt +="\n"+"<text class='text.node' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _nodes[j].fontsize+"pt' "
								+ " fill='" + defaultCOLOR+ "' "
								+ " stroke='none' "
								+ " x='"+ (_nodes[j].x)+"' "
								+ " y='"+ (_nodes[j].y+_nodes[j].fontsize/2)+"' "
								+ " >"+ _nodes[j].title+ "</text>";
					svgtxt += "\n"+"</g>";
				break;
		}
	}
	
	
	svgtxt += "\n"+" <g class='note.Gs' id='G._notes'"+" style='stroke: rgb(0, 0, 0);'>";
	for (var j=0; j< _notes.length; j++){

					svgtxt +="\n"+"<text class='text.note' "
								+ " text-anchor='middle' "
								+ " font-size='"+ _notes[j].fontsize+"pt' "
								+ " stroke='none' "
								+ " fill='" + _notes[j].color+ "' "
								+ " x='"+ (_notes[j].x)+"' "
								+ " y='"+ (_notes[j].y)+"' "
								+ " >"+ _notes[j].text+ "</text>";		
	}
	
	svgtxt += "\n"+"</g>";
	
	
	svgtxt += "\n"+" <g class='line.Gs' id='G._lines'"+" style='stroke: rgb(0, 0, 0);'>";
	for (var j=0; j< _lines.length; j++){
		var tempstrokedotted;
		switch(_lines[j].dotted){
			case 0:tempstrokedotted='none';break;
			case 1:tempstrokedotted='5,5';break;
			default:tempstrokedotted='none';
		}
		svgtxt +="\n"+"<line class='free.line' "
								+ " x1= '"+ (_lines[j].startP.x)+ "'"
								+ " y1= '"+ (_lines[j].startP.y)+ "'"
								+ " x2= '"+ (_lines[j].endP.x)+ "'"
								+ " y2= '"+ (_lines[j].endP.y)+ "'"								
								+ " stroke-dasharray='"+ tempstrokedotted+ "'"
								+ " stroke='"+_lines[j].color+ "'"
								+ " stroke-width='" + _lines[j].strokewidth+ "px' "
								+ " />";		
	}		
	svgtxt += "\n"+"</g>";
	
	svgtxt += "\n"+"</svg>";
	return svgtxt;
}

function GraphToText1() {
    r = "<p>Start,&nbsp;&nbsp;Type,&nbsp;&nbsp;Path,&nbsp;&nbsp;End,&nbsp;&nbsp;Type,&nbsp;&nbsp;Label</p>";
    for (var e = 0; e < edges.length; e++) {
        var t = edges[e],
            a = nodes[matchnodeindex(nodes, t.startid)],
            n = nodes[matchnodeindex(nodes, t.endid)],
            s = {
                rect: 0,
                ellipse: 1,
                triangle: 2
            },
            l = {
                uni: 1,
                bi: 0
            };
        r += "<p>" + a.type == "triangle" ? "1" : a.title + ",&nbsp;&nbsp;" + s[a.type] + ",&nbsp;&nbsp;" + l[t.type] + ",&nbsp;&nbsp;" + n.title + ",&nbsp;&nbsp;" + s[n.type] + ",&nbsp;&nbsp;" + t.label + "</p>"
    }
    return r
}



function GraphToText1() {
    r = "<p>Start,&nbsp;&nbsp;Type,&nbsp;&nbsp;Path,&nbsp;&nbsp;End,&nbsp;&nbsp;Type,&nbsp;&nbsp;Label</p>";
    for (var e = 0; e < edges.length; e++) {
        var t = edges[e],
            a = nodes[matchnodeindex(nodes, t.startid)],
            n = nodes[matchnodeindex(nodes, t.endid)],
            s = {
                rect: 0,
                ellipse: 1,
                triangle: 2
            },
            l = {
                uni: 1,
                bi: 0
            };
        r += "<p>" + a.type == "triangle" ? "1" : a.title + ",&nbsp;&nbsp;" + s[a.type] + ",&nbsp;&nbsp;" + l[t.type] + ",&nbsp;&nbsp;" + n.title + ",&nbsp;&nbsp;" + s[n.type] + ",&nbsp;&nbsp;" + t.label + "</p>"
    }
    return r
}

function GraphToMATH(e, t, r, a) {
    var n = "<!DOCTYPE html>\n<html>\n<head>";
    return n += "\n<title>SEM diagrams</title>", n += "\n \t <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_SVG'> document.getElementById('printbutton').addEventListener('click', function(e){e.target.style.display='none';try {document.execCommand('print', false, null)} catch {window.print()};});<\/script>", n += "\n \t <script src='http://semdiag.psychstat.org/js/svg_mathjax.js' charset='utf-8'><\/script>", n += "\n <script>", n += "\n \t new Svg_MathJax().install();", n += "\n \t <\/script>", n += "\n</head>", n += "\n<body>", n += "\n <div><button id='printbutton'>print</button></div> <div id='svg_with_math'> \n", n += GraphToSVG(e, t, r, a), n += "\n </div>", n += "\n</body>\n</html>"
}